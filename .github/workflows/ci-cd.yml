name: CI / CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - master

jobs:
  checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        check: ['tests', 'pre-commit', 'lint']
        python-version: ["3.10.12"]
        poetry-version: ["1.8.1"]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sbomify
          POSTGRES_PASSWORD: sbomify
          POSTGRES_DB: sbomify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://sbomify:sbomify@localhost:5432/sbomify
      DJANGO_SETTINGS_MODULE: sbomify.settings

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "STRIPE_SECRET_KEY=sk_test_dummy_key_for_ci" >> $GITHUB_ENV
          echo "STRIPE_PUBLISHABLE_KEY=pk_test_dummy_key_for_ci" >> $GITHUB_ENV
          echo "STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_ci" >> $GITHUB_ENV
          echo "STRIPE_ENDPOINT_SECRET=whsec_dummy_key_for_ci" >> $GITHUB_ENV
          echo "DJANGO_TEST=true" >> $GITHUB_ENV
          cp .env.example .env

      - name: Set up Python ${{ matrix.python-version }}
        if: matrix.check != 'lint'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        if: matrix.check != 'lint'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install poetry
        if: matrix.check != 'lint'
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install Python dependencies
        if: matrix.check != 'lint'
        run: |
          poetry install --with dev,test

      - name: Setup Bun
        if: matrix.check == 'pre-commit' || matrix.check == 'lint'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.0.25"

      - name: Install JS dependencies
        if: matrix.check == 'pre-commit' || matrix.check == 'lint'
        run: bun install

      - name: Run pre-commit
        if: matrix.check == 'pre-commit'
        run: poetry run pre-commit run --all-files

      - name: Install PostgreSQL client
        if: matrix.check == 'tests'
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Setup test assets
        if: matrix.check == 'tests'
        run: |
          # Create static assets structure in project root
          mkdir -p static/assets
          # Create empty asset files
          for file in main.js main.css teams.js teams.css billing.js billing.css sboms.js sboms.css django-messages.js alerts-global.js; do
            echo "// Test asset" > static/assets/$file
          done

      - name: Run Backend Tests
        if: matrix.check == 'tests'
        env:
          TEST_DB_NAME: sbomify_test
          TEST_DB_USER: sbomify
          TEST_DB_PASSWORD: sbomify
          DEBUG: True
          STRIPE_SECRET_KEY: 'sk_test_dummy_key_for_ci'
          STRIPE_PUBLISHABLE_KEY: 'pk_test_dummy_key_for_ci'
          STRIPE_WEBHOOK_SECRET: 'whsec_dummy_key_for_ci'
          STRIPE_ENDPOINT_SECRET: 'whsec_dummy_key_for_ci'
          DATABASE_URL: postgres://sbomify:sbomify@localhost:5432/sbomify
          DJANGO_SETTINGS_MODULE: sbomify.test_settings
          DJANGO_TEST: 'true'
        run: |
          # Copy environment variables
          cp .env.example .env

          # Create test database with correct privileges
          psql postgres://sbomify:sbomify@localhost:5432/sbomify -c "CREATE DATABASE sbomify_test;"
          psql postgres://sbomify:sbomify@localhost:5432/sbomify -c "GRANT ALL PRIVILEGES ON DATABASE sbomify_test TO sbomify;"

          # Add database setup commands
          poetry run python manage.py migrate

          # Collect static files
          poetry run python manage.py collectstatic --noinput

          # Rest of the test commands...
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          poetry run coverage run -m pytest --json-report --json-report-file=pytest.json

          # Create test summary table
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          jq -r '"| Total Tests | \(.summary.total) |
          | Passed | \(.summary.passed) |
          | Failed | \(.summary.failed) |
          | Skipped | \(.summary.skipped) |
          | Duration | \(.duration)s |"' pytest.json >> $GITHUB_STEP_SUMMARY

          # Add test details if there are failures
          if [ $(jq '.summary.failed' pytest.json) -gt 0 ]; then
            echo -e "\n### Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo "| Test | Duration | Error |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.tests[] | select(.outcome=="failed") | "| \(.nodeid) | \(.duration)s | \(.call.longrepr) |"' pytest.json >> $GITHUB_STEP_SUMMARY
          fi

          echo -e "\n## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          poetry run coverage report --fail-under=80 | tee >(cat >> $GITHUB_STEP_SUMMARY)
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run lint
        if: matrix.check == 'lint'
        run: bun lint

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment variables
        run: cp .env.example .env

      - name: Test Development Docker Build
        run: docker compose --profile dev build

      - name: Test Production Docker Build
        run: docker compose --profile prod build

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: ${{ success() && startsWith(github.ref, 'refs/tags/v') }}
    needs: [checks]
    steps:
      - uses: actions/checkout@v4

      - name: Upload SBOM
        uses: sbomify/github-action@master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: 2hg-dk8ixV
          LOCK_FILE: 'poetry.lock'
          AUGMENT: true
          UPLOAD: true
